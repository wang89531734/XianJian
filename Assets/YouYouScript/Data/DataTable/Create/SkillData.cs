// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct SkillData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SkillData GetRootAsSkillData(ByteBuffer _bb) { return GetRootAsSkillData(_bb, new SkillData()); }
  public static SkillData GetRootAsSkillData(ByteBuffer _bb, SkillData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SkillData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int IconNo { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(10); }
  public string Help { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHelpBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetHelpBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetHelpArray() { return __p.__vector_as_array<byte>(12); }
  public int EmItemType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmSkillEffectType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmTriggerType { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Group { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LearnRole { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UseLevel { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UsePartner { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CastHP { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CastMP { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float CastCD { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string CastBuffer { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCastBufferBytes() { return __p.__vector_as_span(34); }
#else
  public ArraySegment<byte>? GetCastBufferBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCastBufferArray() { return __p.__vector_as_array<byte>(34); }
  public int CastCallID { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CastCallRate { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CastCallList { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCastCallListBytes() { return __p.__vector_as_span(40); }
#else
  public ArraySegment<byte>? GetCastCallListBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCastCallListArray() { return __p.__vector_as_array<byte>(40); }
  public int UseEffectID { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SkillData> CreateSkillData(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int IconNo = 0,
      StringOffset DescOffset = default(StringOffset),
      StringOffset HelpOffset = default(StringOffset),
      int emItemType = 0,
      int emSkillEffectType = 0,
      int emTriggerType = 0,
      int Group = 0,
      int LearnRole = 0,
      int UseLevel = 0,
      int UsePartner = 0,
      int CastHP = 0,
      int CastMP = 0,
      float CastCD = 0.0f,
      StringOffset CastBufferOffset = default(StringOffset),
      int CastCallID = 0,
      int CastCallRate = 0,
      StringOffset CastCallListOffset = default(StringOffset),
      int UseEffectID = 0) {
    builder.StartObject(20);
    SkillData.AddUseEffectID(builder, UseEffectID);
    SkillData.AddCastCallList(builder, CastCallListOffset);
    SkillData.AddCastCallRate(builder, CastCallRate);
    SkillData.AddCastCallID(builder, CastCallID);
    SkillData.AddCastBuffer(builder, CastBufferOffset);
    SkillData.AddCastCD(builder, CastCD);
    SkillData.AddCastMP(builder, CastMP);
    SkillData.AddCastHP(builder, CastHP);
    SkillData.AddUsePartner(builder, UsePartner);
    SkillData.AddUseLevel(builder, UseLevel);
    SkillData.AddLearnRole(builder, LearnRole);
    SkillData.AddGroup(builder, Group);
    SkillData.AddEmTriggerType(builder, emTriggerType);
    SkillData.AddEmSkillEffectType(builder, emSkillEffectType);
    SkillData.AddEmItemType(builder, emItemType);
    SkillData.AddHelp(builder, HelpOffset);
    SkillData.AddDesc(builder, DescOffset);
    SkillData.AddIconNo(builder, IconNo);
    SkillData.AddName(builder, NameOffset);
    SkillData.AddId(builder, Id);
    return SkillData.EndSkillData(builder);
  }

  public static void StartSkillData(FlatBufferBuilder builder) { builder.StartObject(20); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddIconNo(FlatBufferBuilder builder, int IconNo) { builder.AddInt(2, IconNo, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(3, DescOffset.Value, 0); }
  public static void AddHelp(FlatBufferBuilder builder, StringOffset HelpOffset) { builder.AddOffset(4, HelpOffset.Value, 0); }
  public static void AddEmItemType(FlatBufferBuilder builder, int emItemType) { builder.AddInt(5, emItemType, 0); }
  public static void AddEmSkillEffectType(FlatBufferBuilder builder, int emSkillEffectType) { builder.AddInt(6, emSkillEffectType, 0); }
  public static void AddEmTriggerType(FlatBufferBuilder builder, int emTriggerType) { builder.AddInt(7, emTriggerType, 0); }
  public static void AddGroup(FlatBufferBuilder builder, int Group) { builder.AddInt(8, Group, 0); }
  public static void AddLearnRole(FlatBufferBuilder builder, int LearnRole) { builder.AddInt(9, LearnRole, 0); }
  public static void AddUseLevel(FlatBufferBuilder builder, int UseLevel) { builder.AddInt(10, UseLevel, 0); }
  public static void AddUsePartner(FlatBufferBuilder builder, int UsePartner) { builder.AddInt(11, UsePartner, 0); }
  public static void AddCastHP(FlatBufferBuilder builder, int CastHP) { builder.AddInt(12, CastHP, 0); }
  public static void AddCastMP(FlatBufferBuilder builder, int CastMP) { builder.AddInt(13, CastMP, 0); }
  public static void AddCastCD(FlatBufferBuilder builder, float CastCD) { builder.AddFloat(14, CastCD, 0.0f); }
  public static void AddCastBuffer(FlatBufferBuilder builder, StringOffset CastBufferOffset) { builder.AddOffset(15, CastBufferOffset.Value, 0); }
  public static void AddCastCallID(FlatBufferBuilder builder, int CastCallID) { builder.AddInt(16, CastCallID, 0); }
  public static void AddCastCallRate(FlatBufferBuilder builder, int CastCallRate) { builder.AddInt(17, CastCallRate, 0); }
  public static void AddCastCallList(FlatBufferBuilder builder, StringOffset CastCallListOffset) { builder.AddOffset(18, CastCallListOffset.Value, 0); }
  public static void AddUseEffectID(FlatBufferBuilder builder, int UseEffectID) { builder.AddInt(19, UseEffectID, 0); }
  public static Offset<SkillData> EndSkillData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SkillData>(o);
  }
};


}
