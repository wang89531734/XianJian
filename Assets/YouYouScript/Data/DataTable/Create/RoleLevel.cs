// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct RoleLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RoleLevel GetRootAsRoleLevel(ByteBuffer _bb) { return GetRootAsRoleLevel(_bb, new RoleLevel()); }
  public static RoleLevel GetRootAsRoleLevel(ByteBuffer _bb, RoleLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RoleLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(8); }
  public int NextExp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxHP { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxMP { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Atk { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Def { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Matk { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Mdef { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Agi { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Block { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Dodage { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Critical { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillPoint { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<RoleLevel> CreateRoleLevel(FlatBufferBuilder builder,
      int Id = 0,
      int Level = 0,
      StringOffset DescOffset = default(StringOffset),
      int NextExp = 0,
      int MaxHP = 0,
      int MaxMP = 0,
      int Atk = 0,
      int Def = 0,
      int Matk = 0,
      int Mdef = 0,
      int Agi = 0,
      int Block = 0,
      int Dodage = 0,
      int Critical = 0,
      int SkillPoint = 0) {
    builder.StartObject(15);
    RoleLevel.AddSkillPoint(builder, SkillPoint);
    RoleLevel.AddCritical(builder, Critical);
    RoleLevel.AddDodage(builder, Dodage);
    RoleLevel.AddBlock(builder, Block);
    RoleLevel.AddAgi(builder, Agi);
    RoleLevel.AddMdef(builder, Mdef);
    RoleLevel.AddMatk(builder, Matk);
    RoleLevel.AddDef(builder, Def);
    RoleLevel.AddAtk(builder, Atk);
    RoleLevel.AddMaxMP(builder, MaxMP);
    RoleLevel.AddMaxHP(builder, MaxHP);
    RoleLevel.AddNextExp(builder, NextExp);
    RoleLevel.AddDesc(builder, DescOffset);
    RoleLevel.AddLevel(builder, Level);
    RoleLevel.AddId(builder, Id);
    return RoleLevel.EndRoleLevel(builder);
  }

  public static void StartRoleLevel(FlatBufferBuilder builder) { builder.StartObject(15); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(1, Level, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(2, DescOffset.Value, 0); }
  public static void AddNextExp(FlatBufferBuilder builder, int NextExp) { builder.AddInt(3, NextExp, 0); }
  public static void AddMaxHP(FlatBufferBuilder builder, int MaxHP) { builder.AddInt(4, MaxHP, 0); }
  public static void AddMaxMP(FlatBufferBuilder builder, int MaxMP) { builder.AddInt(5, MaxMP, 0); }
  public static void AddAtk(FlatBufferBuilder builder, int Atk) { builder.AddInt(6, Atk, 0); }
  public static void AddDef(FlatBufferBuilder builder, int Def) { builder.AddInt(7, Def, 0); }
  public static void AddMatk(FlatBufferBuilder builder, int Matk) { builder.AddInt(8, Matk, 0); }
  public static void AddMdef(FlatBufferBuilder builder, int Mdef) { builder.AddInt(9, Mdef, 0); }
  public static void AddAgi(FlatBufferBuilder builder, int Agi) { builder.AddInt(10, Agi, 0); }
  public static void AddBlock(FlatBufferBuilder builder, int Block) { builder.AddInt(11, Block, 0); }
  public static void AddDodage(FlatBufferBuilder builder, int Dodage) { builder.AddInt(12, Dodage, 0); }
  public static void AddCritical(FlatBufferBuilder builder, int Critical) { builder.AddInt(13, Critical, 0); }
  public static void AddSkillPoint(FlatBufferBuilder builder, int SkillPoint) { builder.AddInt(14, SkillPoint, 0); }
  public static Offset<RoleLevel> EndRoleLevel(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RoleLevel>(o);
  }
};


}
